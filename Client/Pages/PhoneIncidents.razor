@page "/phoneincidents"
@page "/phoneincidents/{value}"
@using System.Timers;
@using System.Text.Json;
@inject Services.ITerminalService terminalService
@inject Services.IEmployeeService employeeService
@inject Services.IPhoneIncidenceService phoneServices
@inject IJSRuntime JsRuntime


@if (showAlert)
{
    <div class="alert alert-info" role="alert">
      Eliminado
    </div>
}
@if (incidents == null)
{
    <p><em>Cargando...</em></p>
}
else
{
   @* <input type="search" placeholder="Buscar por descripcion" @bind=value />
    <button class="btn btn-primary" @onclick="buscar">Buscar</button>*@


    <DxGrid Data="@incidents"
        KeyFieldName="ID"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        ShowFilterRow="true"
        EditMode="GridEditMode.PopupEditForm">

        <Columns>
            <DxGridCommandColumn Width="120px" />
            <DxGridDataColumn FieldName="ID" Visible=false/>
            <DxGridDataColumn FieldName="IdTerminal" Visible=false />
                <DxGridDataColumn Caption="Terminal">
                    <CellDisplayTemplate>
                        @{
                            var inc = (PhoneIncidence)context.DataItem;
                            var ter = terminal.FirstOrDefault(x => x.ID == inc.IDTerminal);
                            <span>@(ter == null ? "?":$"{ter.Name}")</span>
                         }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            <DxGridDataColumn FieldName="IdEmployee" Visible=false/>
                <DxGridDataColumn Caption="Empleado">
                    <CellDisplayTemplate>
                        @{
                            var inc = (PhoneIncidence)context.DataItem;
                            var emp = employees.FirstOrDefault(x => x.ID == inc.IDEmployee);
                            <span>@(emp == null ? "?":$"{emp.Name}")</span>
                        }
                    </CellDisplayTemplate>
           </DxGridDataColumn>
           <DxGridDataColumn FieldName="Description" Caption="Descripcion" />
           <DxGridDataColumn FieldName="Amount" DisplayFormat="C" Caption="Coste" >
               <CellDisplayTemplate>
                    @{
                        var inc = (PhoneIncidence)context.DataItem;
                        if (inc.Amount == 0)
                        {
                            <span>Sin Coste</span>
                        }
                        else
                        {
                            <span>@(inc.Amount+" €")</span>
                        }
                    }
               </CellDisplayTemplate>
           </DxGridDataColumn>

        </Columns>
        
        <EditFormTemplate Context ="EditFormContext">
                @{
                    var inc = (PhoneIncidence)EditFormContext.EditModel;
                }
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem Caption = "Terminal:" ColSpanMd="6">
                        <DxComboBox Data="terminal.Where(x=>x.ID.ToString()== value)" 
                            TextFieldName=Name
                            ValueFieldName=ID
                            @bind-Value="@inc.IDTerminal"/>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption = "Empleado: " ColSpanMd="6">
                        <DxComboBox Data="employees" 
                            TextFieldName=Name
                            ValueFieldName=ID
                            @bind-Value="@inc.IDEmployee"/>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption = "Descripcion: " ColSpanMd="6">
                        <DxTextBox @bind-Text="@inc.Description"/>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption = "Coste: " ColSpanMd="6">
                        <DxSpinEdit @bind-Value="@inc.Amount" DisplayFormat="C" MinValue="0"/>
                    </DxFormLayoutItem> 
                </DxFormLayout>
    </EditFormTemplate>

    </DxGrid>
    <br>
    <p><b>Incidencias Totales: @incidents.Length</b></p>
    
}
@code {
    private PhoneIncidence[] incidents;
    private Employee[] employees;
    private Terminal[] terminal;

    //private string busqueda;
    private bool showAlert;
    [Parameter]
    public string value { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        incidents = await phoneServices.GetIncidents();
        employees = await employeeService.GetEmployees();
        terminal = await terminalService.GetTerminals();

        if (!string.IsNullOrEmpty(value))
        {
            await buscar();
        }

        StateHasChanged();

    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        Console.WriteLine("Modelsaving");
        Console.WriteLine(e);
        var linT = (PhoneIncidence)e.EditModel;
        await (e.IsNew ? phoneServices.InsertIncidenceAsync(linT) : phoneServices.UpdateIncidenceAsync(linT));
        incidents = await phoneServices.GetIncidents();
        StateHasChanged();
        await buscar();
    }
    //async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    //{
    //    var inc = (PhoneIncidence)e.DataItem;

    //    bool success = await phoneServices.DeleteIncidenceAsync(inc.ID);

    //    if (!success)
    //    {
    //        await JsRuntime.InvokeVoidAsync("alert", "Ocurrió un error al eliminar");
    //        return;
    //    }

    //    incidents = await phoneServices.GetIncidents();

    //    // Mostrar alerta
    //    Timer timer = new Timer();
    //    timer.Interval = 1000;
    //    int countDown = 5;
    //    timer.Elapsed += (o, e) =>
    //    {
    //        if (countDown <= 0)
    //        {
    //            showAlert = false;
    //            timer.Dispose();
    //            StateHasChanged();
    //        }
    //        else
    //        {
    //            countDown -= 1;
    //            StateHasChanged();
    //        }
    //    };
    //    timer.Start();
    //    showAlert = true;

    //    StateHasChanged();
    //}
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var inc = (PhoneIncidence)e.DataItem;
        bool success = await phoneServices.DeleteIncidenceAsync(inc.ID);
        if (!success)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Ocurrió un error al eliminar");
            return;
        }
        incidents = await phoneServices.GetIncidents();
        showAlert = true;
        await buscar();
        StateHasChanged();
        await Task.Delay(3000); // Espera de 5 segundos
        showAlert = false;
        
        
    }
    private async Task buscar()
    {
        incidents = string.IsNullOrEmpty(value)
            ? await phoneServices.GetIncidents()
        : await phoneServices.Buscar(value);
        //value = string.Empty;
    }
    
}
