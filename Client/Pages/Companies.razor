@page "/companies"
@using System.Timers;
@using GestionTelefonos.Client.Pages.Searchers;
@using GestionTelefonos.Client.Pages.Components
@using GestionTelefonos.Shared.Contracts.Forms;
@using System.Text.Json
@inject Services.ICompanyService companyService
@inject IJSRuntime JsRuntime

@if (showAlert)
{
    <div class="alert alert-info" role="alert">
      Eliminado Correctamente
    </div>
}
@if(companies == null)
{
   <div class="text-center">
    <div class="spinner-border text-primary" role="status"> 
        <span class="sr-only"></span>
    </div>
    <div>
        Cargando....
    </div>
   </div>
}
else
{
    //Estilo para los botones de  filtrado en el grid
     <style>
        .filter-type-container {
            display: flex;
        }
        .filter-type-container > div {
            width: 100%;
        }
        .filter-type-button {
            margin-right: 5px;
        }
    </style>
    <div style="margin-top:30px;">
        <h3>Compañías</h3>
    </div>
    
    <br />
    //Funciona bien
    <div style="float:right">
    <CompaniesSearcher
        @ref=companiesSearcher
        onFormSearch=@(async (CompanySearcherForm) => {
                       await FormSearch(CompanySearcherForm);
        })
        onInputSearch=@(async (search) => {
            await InputSearch(search);
        })
        />
    </div> 
    <br />
    <div>
    <DxGrid Data="@companies" 
        style="margin-top:50px;margin-right:50px"
        KeyFieldName="ID"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        ShowFilterRow="true"
        PageSize="5"
        PagerPosition="GridPagerPosition.TopAndBottom"
        CssClass ="w-100"
        >        
    <Columns>
        <DxGridCommandColumn Width="120px" />
        <DxGridDataColumn FieldName="ID" Visible=false/>
        <DxGridDataColumn FieldName="Name" Caption="Nombre">
            <FilterRowCellTemplate>
                <OperatorType FilterContext="@context">
                    <DxTextBox Text="@((string)context.FilterRowValue)"
                               TextChanged="(string v) => context.FilterRowValue  = v"
                               ClearButtonDisplayMode=DataEditorClearButtonDisplayMode.Auto/>
                </OperatorType>
            </FilterRowCellTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="AdmitDate" Caption="Fecha de alta"  >
            <FilterRowCellTemplate>
                <OperatorType FilterContext="@context">
                    <DxDateEdit Date="(DateTime?)context.FilterRowValue"
                                DateChanged="(DateTime? v) => context.FilterRowValue = v"
                                ClearButtonDisplayMode=DataEditorClearButtonDisplayMode.Auto/>
                </OperatorType>
            </FilterRowCellTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="DischargeDate" Caption="Fecha de baja"  >
            <FilterRowCellTemplate>
                <OperatorType FilterContext="@context">
                    <DxDateEdit Date="(DateTime?)context.FilterRowValue"
                                DateChanged="(DateTime? v) => context.FilterRowValue = v"
                                ClearButtonDisplayMode=DataEditorClearButtonDisplayMode.Auto/>
                </OperatorType>
            </FilterRowCellTemplate>
            <CellDisplayTemplate>
                    @{
                        var comp = (Company)context.DataItem;
                        if(comp.DischargeDate == null)
                        {
                            <span>En curso</span>
                            isActive = true;
                        }
                        else
                        {
                            <span>@(comp.DischargeDate?.ToString("dd/MM/yyyy"))</span>
                        }
                    }
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
    
    <EditFormTemplate Context="EditFormContext">
        @{
            var company = (Company)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Caption="Nombre:" ColSpanMd="6">
                <DxTextBox @bind-Text="@company.Name" />
            </DxFormLayoutItem>  
            <DxFormLayoutItem Caption="Fecha Alta:" ColSpanMd="6">
                <DxDateEdit @bind-Date="@company.AdmitDate" 
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" 
                MinDate="date"/>
            </DxFormLayoutItem> 
            <DxFormLayoutItem Caption="Fecha Baja:" ColSpanMd="6">
                    <DxDateEdit @bind-Date="@company.DischargeDate" 
                    NullText="En curso..." 
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" 
                    MinDate="date" />
            </DxFormLayoutItem> 
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>
</div>
<br>
<div>
<p><b>Compañias Totales: @companies.Length</b></p>
</div>
}
@code {

    private Company[] companies;
    private bool showAlert;
    public bool isActive;

    DateTime date = new DateTime(2000, 01, 01);

    public CompaniesSearcher companiesSearcher{ set; get; }

    protected override async Task OnInitializedAsync()
    {
        companies = await companyService.GetCompanies();
    } 
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        Console.WriteLine("Modelsaving");
        Console.WriteLine(e);
        var company = (Company)e.EditModel;
        await (e.IsNew ? companyService.InsertCompanyAsync(company) : companyService.UpdateCompanyAsync(company));
        companies = await companyService.GetCompanies();
        StateHasChanged();
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var comp = (Company)e.DataItem;
        bool success = await companyService.DeleteCompanyAsync(comp.ID);
        if (!success)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Ocurrió un error al eliminar");
            return;
        }
        companies = await companyService.GetCompanies();
        showAlert = true;
        StateHasChanged();

        await Task.Delay(5000); // Espera de 5 segundos
        showAlert = false;
        StateHasChanged();
    }
    private async Task InputSearch(string search) {
        companies = string.IsNullOrEmpty(search)
            ? await companyService.GetCompanies()
            : await companyService.Buscar(search);        
    }
    private async Task FormSearch(CompanySearcherForm companyForm)
    {
        companies = (companyForm.Name == null && companyForm.AdmitDateInicio == null
            && companyForm.AdmitDateFin== null && companyForm.DischargeDateInicio==null 
            && companyForm.DischargeDateFin == null)
        ? await companyService.GetCompanies()
        : await companyService.BuscarForm(companyForm);
        
     }
}

