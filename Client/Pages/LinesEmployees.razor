@page "/linesemployees"
@using System.Text.Json;
@using System.Timers;
@inject Services.ILinesEmployeeService linesEmployeeService
@inject Services.ILineService lineService
@inject Services.IEmployeeService employeeService
@inject IJSRuntime JsRuntime

<h3>Lineas Empleados</h3>

@if (showAlert)
{
    <div class="alert alert-info" role="alert">
        Eliminado
    </div>
}

@if (linesEmployees == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <DxGrid Data="@linesEmployees"
        KeyFieldName="ID"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        >
        <Columns>
            <DxGridCommandColumn Width="120px" />
            <DxGridDataColumn FieldName="ID" Visible=false />
            <DxGridDataColumn FieldName="IDLine" Visible=false />
            <DxGridDataColumn Caption="Linea">
                <CellDisplayTemplate>
                    @{
                        var linE = (LinesEmployee)context.DataItem;
                        var lin = lines.FirstOrDefault(x => x.ID == linE.IDLine);
                        <span>@(lin == null ? "?": $"Linea #{linE.IDLine}" )</span>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="IDEmployee" Visible=false />
            <DxGridDataColumn Caption="Empleado">
                <CellDisplayTemplate>
                    @{
                        var linE = (LinesEmployee)context.DataItem;
                        var emp = employees.FirstOrDefault(x => x.ID == linE.IDLine);
                        <span>@(emp == null ? "?": $"{emp.Name}" )</span>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="StartDate" Caption="Fecha Inicio"/>
            <DxGridDataColumn  FieldName="FinishDate" Caption="Fecha Fin" >
                <CellDisplayTemplate>
                    @{
                        var linE = (LinesEmployee)context.DataItem;
                        if (linE.FinishDate == null)
                        {
                            <span>En curso</span>
                        }
                        else
                        {
                            <span>@(linE.FinishDate?.ToString("dd/MM/yyyy"))</span>
                        }
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>
        <EditFormTemplate Context="EditFormContext">
            @{
                var linE = (LinesEmployee)EditFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem Caption="Linea:" ColSpanMd="6">
                    <DxComboBox Data="lines"
                            TextFieldName="ID"
                            ValueFieldName="ID"
                            @bind-Value="@linE.IDLine" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Empleado: " ColSpanMd="6">
                   <DxComboBox Data="employees"
                            TextFieldName="Name"
                            ValueFieldName="ID"
                            @bind-Value="@linE.IDEmployee" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Fecha Inicio: " ColSpanMd="6">
                    <DxDateEdit @bind-Date="@linE.StartDate"  ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" 
                    MinDate="new DateTime(2000, 01, 01)"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Fecha Fin: " ColSpanMd="6">
                    <DxDateEdit @bind-Date="@linE.FinishDate" NullText="En curso..." 
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" MinDate="new DateTime(2000, 01, 01)"/>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
    <br>
    <p><b>Entradas Totales: @linesEmployees.Length</b></p>
}

@code {
    private LinesEmployee[] linesEmployees;
    private Employee[] employees;
    private Line[] lines;

    private string busqueda;
    private bool showAlert;

    protected override async Task OnInitializedAsync()
    {
        linesEmployees = await linesEmployeeService.GetLinesEmployee();
        lines = await lineService.GetLines();
        employees = await employeeService.GetEmployees();
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        Console.WriteLine("Modelsaving");
        Console.WriteLine(e);
        var linE = (LinesEmployee)e.EditModel;
        await (e.IsNew ? linesEmployeeService.InsertLinesEmployeesAsync(linE) : linesEmployeeService.UpdateLinesEmployeesAsync(linE));
        linesEmployees = await linesEmployeeService.GetLinesEmployee();
        StateHasChanged();
        await buscar();
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var linE = (LinesEmployee)e.DataItem;
        bool success = await linesEmployeeService.DeleteLinesEmployeesAsync(linE.ID);
        if (!success)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Ocurrió un error al eliminar");
            return;
        }
        linesEmployees = await linesEmployeeService.GetLinesEmployee();
        showAlert = true;
        await buscar();
        StateHasChanged();
        await Task.Delay(3000); // Espera de 5 segundos
        showAlert = false;
      
        
    }
    private async Task buscar()
    {
        linesEmployees = string.IsNullOrEmpty(busqueda)
            ? await linesEmployeeService.GetLinesEmployee()
            : await linesEmployeeService.Buscar(busqueda);
        //busqueda = string.Empty;
    }
}

