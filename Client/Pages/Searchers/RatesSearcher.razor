@using GestionTelefonos.Shared.Contracts.Forms 
@using System.Text.Json
@inject Services.ICompanyService companyService

<div>
    <input type="search" placeholder="Buscar por nombre" style="width:200px;"@bind='search'/>
    <button class="btn btn-primary" @onclick="openForm" id="dropdown-target-container"><i class="oi oi-caret-bottom" ></i></button>
    <button class="btn btn-primary" @onclick="@(async () => {await onInputSearch.InvokeAsync(search);search=string.Empty;})">
    <i class="oi oi-magnifying-glass"></i>
    </button>
</div>
<DxDropDown
    @bind-IsOpen="@IsOpen"
    AllowResize="false"
    CloseMode="DropDownCloseMode.Close"
    PreventCloseOnPositionTargetClick="true"
    PositionMode="DropDownPositionMode.Bottom"
    PositionTarget="#dropdown-target-container"
    RestrictionTarget="#Navigation-DropDown-Customization"
    FooterVisible="true"
    MinWidth="500"
    MinHeight="400"
    MaxWidth="700"
    MaxHeight="600"
    Width="max(25vw,250px)"
>
<BodyTextTemplate>
    @if(showAlert){
            <div class="alert alert-danger m-4" role="alert">
                Se han de rellenar todos los campos y los operadores
            </div>
    }else{
    <div style="padding:10px">
    <div>                
       <p><b>Nombre</b></p>
       <input type="search" placeholder="Introduce un nombre..." style="width: 215px; " @bind='@rateForm.Name'/>
    </div>
    <br>
    <div style="display:flex">
        <div >
        <p><b>Compañia</b></p>
        </div>
    </div>
    <div>
        <DxTagBox
            Data="@companies"
            Values="@rateForm.CompanyIds"
            ValueFieldName="ID"
            TextFieldName="Name"
            NullText="Seleccione una compañia..."
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            SelectedItemsChanged="@((values) => {
                rateForm.CompanyIds.Clear();
                if(values!=null){
                rateForm.CompanyIds.AddRange(values.Select(x => x.ID));
                }
            })"/>
    </div>
    <br>
    <div>
        <p><b>Precio</b></p>
        <div style="display:flex">
            <div style="padding-right:5px">
                <input type="search" placeholder="Introduce un precio decimal..." style="width: 215px;" @bind='rateForm.Amount' />
            </div>
            <div>
                <div id="grupo1" class="btn-group btn-group-toggle" data-toggle="buttons1">
                    <label class="btn btn-secondary">
                    <input type="radio" name="options1" id="option1" autocomplete="off"  @onclick=@(()=>{rateForm.OperacionAmount=menorigual;})> &le;
                    </label>
                    <label class="btn btn-secondary">
                    <input type="radio" name="options1" id="option2" autocomplete="off"  @onclick="@(()=>{rateForm.OperacionAmount=igual;})"> &equals;
                    </label>
                    <label class="btn btn-secondary">
                    <input type="radio" name="options1" id="option3" autocomplete="off" @onclick="@(()=>{rateForm.OperacionAmount=mayorigual;})"> &ge;
                    </label>
                </div>
            </div>
        </div>
    </div>
    <br>
    <div style="display:flex" >
               <div>
                    <p><b>Tiene Descuento?</b></p>
               </div>
               <div style="padding:10px">
                   <input type="checkbox" @bind="@IsDiscounted"/>
               </div> 
                
            </div>
    <div style="display:@(IsDiscounted ? "block" : "none")">
        <p><b>Descuento</b></p>
        <div style="display:flex">
        <div style="padding-right:5px">
        <input type="search" placeholder="Introduce un descuento decimal..." style="width: 215px;" @bind='rateForm.Discount' />
        </div>
            <div>
                <div id="grupo2" class="btn-group btn-group-toggle" data-toggle="buttons2">
                    <label class="btn btn-secondary">
                    <input type="radio" name="options2" id="option4" autocomplete="off" @onclick="@(()=>{rateForm.OperacionDiscount=menorigual;})"> &le;
                    </label>
                    <label class="btn btn-secondary">
                    <input type="radio" name="options2" id="option5" autocomplete="off"   @onclick="@(()=>{rateForm.OperacionDiscount=igual;})"> &equals;
                    </label>
                    <label class="btn btn-secondary">
                    <input type="radio" name="options2" id="option6" autocomplete="off" @onclick="@(()=>{rateForm.OperacionDiscount=mayorigual;})"> &ge;
                    </label>
                </div>
            </div>
            
           </div>    
        </div>
    <br>
    <div>
        <p><b>Precio Final</b></p>
        <div style="display:flex">
        <div style="padding-right:5px">
        <input type="search" placeholder="Introduce un precio final decimal..." style="width:215px;" @bind='rateForm.MonthlyNetAmount'/>
        </div>
        <div>
                <div id="grupo3" class="btn-group btn-group-toggle" data-toggle="buttons3">
                    <label class="btn btn-secondary">
                    <input type="radio" name="options3" id="option7" autocomplete="off" @onclick="@(()=>{rateForm.OperacionMonthlyNetAmount=menorigual;})"> &le;
                    </label>
                    <label class="btn btn-secondary">
                    <input type="radio" name="options3" id="option8" autocomplete="off"  @onclick="@(()=>{rateForm.OperacionMonthlyNetAmount=igual;})"> &equals;
                    </label>
                    <label class="btn btn-secondary">
                    <input type="radio" name="options3" id="option9" autocomplete="off" @onclick="@(()=>{rateForm.OperacionMonthlyNetAmount=mayorigual;})"> &ge;
                    </label>
                </div>
            </div>
        </div>
    </div>
    </div>
    }
</BodyTextTemplate>
    <FooterTextTemplate>
        <button class="btn btn-primary" @onclick="@(async () => 
            { 
            if (IsDiscounted==false)
            {
                rateForm.Discount= null;
                StateHasChanged();
             }if(rateForm.Amount!=null && rateForm.OperacionAmount == null || rateForm.Discount != null && rateForm.OperacionDiscount== null || rateForm.MonthlyNetAmount != null && rateForm.OperacionMonthlyNetAmount==null ){
                 showAlert = true;
                 await Task.Delay(3000);
                 showAlert = false;
                 StateHasChanged();

             }else{
                        await onFormSearch.InvokeAsync(rateForm);
                        Console.WriteLine(JsonSerializer.Serialize(rateForm.CompanyIds));
                        IsOpen=false;
                        rateForm.Name=string.Empty;
                        rateForm.Amount=null;
                        rateForm.Discount=null;
                        rateForm.MonthlyNetAmount=null;
                        //Variables para operadores de la consulta
                        rateForm.OperacionAmount=null;
                        rateForm.OperacionDiscount=null;
                        rateForm.OperacionMonthlyNetAmount =null; 
                        }
                
            })">
            <i class="oi oi-magnifying-glass"></i>
        </button>
    </FooterTextTemplate>
</DxDropDown>

@code {
    private bool IsDiscounted=false;
    private bool showAlert = false;
    bool IsOpen { get; set; } = false;
    bool IsOpenSelector { get; set; } = false;
    string search;
    private string menorigual = "<=";
    private string mayorigual = ">=";
    private string igual = "=";
    RateSearcherForm rateForm { get; set; } = new();
    private IEnumerable<Company> companies;

    [Parameter]
    public EventCallback<RateSearcherForm> onFormSearch { get; set; }
    [Parameter]
    public EventCallback<string> onInputSearch { get; set; }

    async Task openForm()
    { 
        IsOpen = true;

        rateForm.CompanyIds = new List<int>();

        Console.WriteLine(rateForm.CompanyIds);
        //string json = JsonSerializer.Serialize( rateForm.CompanyIds);

        companies = await companyService.GetCompanies();

        rateForm.CompanyIds = new();
       
        //rateForm.CompanyIds.Add(companies.FirstOrDefault(x => x.DischargeDate == null).ID);
       
        /*
        var activeCompanies = companies.Where(x=>x.DischargeDate==null);
        var activeCompanyIds = activeCompanies.Select(x => x.ID);
        rateForm.CompanyIds.AddRange(activeCompanyIds);
        */

        //Añade todas las compañias en actibo al TagBox del formulario de busqueda
        rateForm.CompanyIds.AddRange(companies.Where(x => x.DischargeDate == null).Select(x => x.ID));

        StateHasChanged();
    }
}
